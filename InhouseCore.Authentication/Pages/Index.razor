@page "/"
@using System.Security.Claims
@using InhouseCore.Authentication.Components
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Authentication</PageTitle>

<h1>Authentication</h1>

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="login">Login</Tab>
        <Tab Name="register">Register</Tab>
    </Items>
    <Content>
        <TabPanel Name="login">
            <Login />
        </TabPanel>
        <TabPanel Name="register">
            <Register />
        </TabPanel>
    </Content>
</Tabs>

<AuthorizeView>
    <Authorized>
        <p>Hello, @authenticationState?.User.Identity?.Name!</p>
    </Authorized>
    <Authorizing>
        Authenticating...
    </Authorizing>
    <NotAuthorized>
        Not Authenticated!
    </NotAuthorized>
</AuthorizeView>


<br />
<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>
<br />
<span>Claims</span>
@if (claims.Count() > 0)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

@code {
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private AuthenticationState? authenticationState;
    private string selectedTab = "login";

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        return Task.CompletedTask;
    }

    private async Task GetClaimsPrincipalData()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
            claims = user.Claims;
    }
}