@using System.ComponentModel.DataAnnotations

<Card>
    <CardBody>
        <Validations Mode="ValidationMode.Auto" Model="@user" ValidateOnLoad="false">
            <Validation Validator="@ValidationRule.IsEmail">
                <Field>
                    <FieldLabel>Email address</FieldLabel>
                    <TextEdit Placeholder="example@email.com" @bind-Text="@user.Email">
                    </TextEdit>
                    <FieldHelp>We'll never share your email with anyone else.</FieldHelp>
                </Field>
            </Validation>
            <Validation>
                <Field>
                    <FieldLabel>Password</FieldLabel>
                    <TextEdit Role="TextRole.Password" Placeholder="Not your birthday" @bind-Text="@user.Password">
                    </TextEdit>
                </Field>
            </Validation>
            <Validation>
                <Field>
                    <FieldLabel>Confirm Password</FieldLabel>
                    <TextEdit Role="TextRole.Password" Placeholder="Confirm Password" @bind-Text="@user.ConfirmPassword">
                    </TextEdit>
                </Field>
            </Validation>
            <Field JustifyContent="JustifyContent.End">
                <Button Color="Color.Primary" Clicked="SubmitRegister">Submit</Button>
            </Field>
        </Validations>
    </CardBody>
</Card>

@code{

    private sealed class User
    {
#pragma warning disable CS8618
        [Required]
        [EmailAddress(ErrorMessage = "Invalid email.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(8, ErrorMessage = "Must be between 5 and 8 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [StringLength(8, ErrorMessage = "Must be between 5 and 8 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Compare("Password")]
        public string ConfirmPassword { get; set; }

        //for illustration purposes
        [Range(typeof(bool), "true", "true", ErrorMessage = "You gotta tick the box!")]
        public bool TermsAndConditions { get; set; }
#pragma warning restore CS8618
    }

    private User user = new User();

    //make async when implementing
    private Task SubmitRegister()
    {
        Console.WriteLine("Register submit.");
        return Task.CompletedTask;
    }
}