@page "/champions"
@using Microsoft.AspNetCore.Authorization
@using SharedKernel.Contracts.v1
@using SharedKernel.Contracts.v1.Champions

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [AllowAnonymous]

<PageTitle>Champions</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Champions</MudText>


<MudButton Color="Color.Success" OnClick="CreateTestChampion">Create</MudButton>
<MudButton Color="Color.Error" OnClick="CreateErrorChampion">Create with bad input</MudButton>
<MudButton OnClick="FetchChampions">Refresh</MudButton>

@if (champions == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="champions" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChampionDto, object>(x=>x.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ChampionDto, object>(x=>x.Role)">
                    Role
                </MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="(e) => EditChampion(context.Id)">Edit</MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(e) => DeleteChampion(context.Id)">Delete</MudIconButton>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{ 5, 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<ChampionDto>? champions;

    protected override async Task OnInitializedAsync()
    {
        await FetchChampions();
    }

    private async Task FetchChampions()
    {
        try
        {
            var apiResponse = await HttpClient.GetFromJsonAsync<GetAllChampionsResponse>("champions");
            if (apiResponse != null)
            {
                champions = apiResponse.Champions;
            }
            else
            {
                champions = new List<ChampionDto>();
                Snackbar.Add("Failed to fetch champions.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while fetching champions: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateTestChampion() => await CreateChampion("Ranged");
    private async Task CreateErrorChampion() => await CreateChampion("Rangeddddddddddd");
    private async Task CreateChampion(string role)
    {
        var request = new CreateChampionRequest($"TestChampion_{DateTime.UtcNow.Ticks}", role);
        try
        {
            var response = await HttpClient.PostAsJsonAsync("champions", request);

            if (response.IsSuccessStatusCode)
            {
                await FetchChampions();
                Snackbar.Add("Champion created successfully!", Severity.Success);
            }
            else
            {
                // Read the response content and display errors in the snackbar
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                if (errorResponse?.Errors != null)
                {
                    foreach (var error in errorResponse.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add("An unexpected error occurred.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }


    private async void DeleteChampion(string id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Champion",
            $"Are you sure you want to delete this champion?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"champions/{id}");

                if (response.IsSuccessStatusCode)
                {
                    await FetchChampions();
                    Snackbar.Add("Champion deleted successfully.", Severity.Success);
                }
                else
                {
                    // Handle the error response
                    var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    if (errorResponse?.Errors != null)
                    {
                        foreach (var error in errorResponse.Errors)
                        {
                            Snackbar.Add(error, Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add("An unexpected error occurred.", Severity.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
    }

    private async void EditChampion(string id)
    {
        try
        {
            // Fetch the champion data by ID
            var champion = await HttpClient.GetFromJsonAsync<ChampionDto>($"champions/{id}");

            if (champion is null)
            {
                Snackbar.Add("Champion not found", Severity.Error);
                return;
            }

            // Pass the champion data to the dialog for editing
            DialogParameters<EditChampionDialog> dialogParameters = new()
            {
                { x => x.Id, champion.Id },
                { x => x.Restrictions, champion.Restrictions },
            };

            // Show the dialog and wait for the result
            var dialog = DialogService.Show<EditChampionDialog>("Edit Champion", dialogParameters);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                var updatedChampion = (ChampionDto)result.Data!;
                var response = await HttpClient.PutAsJsonAsync($"champions/{id}", updatedChampion);

                if (response.IsSuccessStatusCode)
                {
                    await FetchChampions();
                    Snackbar.Add("Champion updated successfully!", Severity.Success);
                }
                else
                {
                    // Read and display errors from the response
                    var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    if (errorResponse?.Errors != null)
                    {
                        foreach (var error in errorResponse.Errors)
                        {
                            Snackbar.Add(error, Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add("An unexpected error occurred while updating the champion.", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

}
