@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using Domain.Users
@using MudBlazor.StaticInput

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <MudAlert Variant="Variant.Text" 
              Severity="Severity.Warning">
              There are no external authentication services configured.
    </MudAlert>
    <MudText Typo="Typo.body1" 
             Class="pt-4">
        See <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</MudLink>
        about setting up this ASP.NET application to support logging in via external services
    </MudText>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (AuthenticationScheme provider in externalLogins)
                {
                    <input type="hidden" name="provider" value="@provider.Name" />
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="@Variant.Text"
                               Style="@($@"color: {Color.Secondary}")"
                               FullWidth="true">
                        <MudIcon Icon="@Icons.Custom.Brands.Discord"
                                 Color="@Color.Secondary"
                                 Class="mr-auto" />
                        @provider.DisplayName
                        <MudIcon Icon="@Icons.Material.Filled.Login"
                                 Color="@Color.Secondary"
                                 Class="ml-auto" />
                    </MudButton>
                }
            </p>
        </div>
    </form>
    <MudDivider />
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .ToArray();
    }
}
